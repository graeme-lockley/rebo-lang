let float = rebo.lang.float
let gc = rebo.lang.gc
let int = rebo.lang.int
let keys = rebo.lang.keys
let len = rebo.lang.len
let scope = rebo.lang.scope
let str = rebo.lang.str
let typeof = rebo.lang.typeof

let close = rebo.os.close
let cwd = rebo.os.cwd
let exit = rebo.os.exit
let fexists = rebo.os.fexists
let listen = rebo.os.listen
let ls = rebo.os.ls
let milliTimestamp = rebo.os.milliTimestamp
let open = rebo.os.open
let print = rebo.os.print
let println = rebo.os.println
let read = rebo.os.read
let socket = rebo.os.socket
let write = rebo.os.write

let eval(script, opts = {}) {
   let __compile = rebo.os["bc.compile"]
   let __eval(e, s) = rebo.os["bc.eval"](__compile(e), s ? scope())

   let callerScope = opts.scope ? __caller_scope__
   
   { if opts.persistent ? false -> __eval(script, callerScope)
      | __eval(script, rebo.lang["scope.open"](callerScope))
   }  catch err -> raise { content: script, ...err }
}

let import(name) {
   let callerScope = __caller_scope__

   let lastIndexOf(xs, item) {
      let result = ()
      let lp = len(xs) - 1

      while result == () && lp >= 0 -> {
         if xs[lp] == item -> result := lp

         lp := lp - 1
      }

      result
   }

   let dir(path) {
      let lastSlash = lastIndexOf(path, '/')
      
      if lastSlash == () -> "."
       | lastSlash == 0 -> "/"
       | lastSlash == len(path) - 1 -> dir(path[0:lastSlash])
       | path[0:lastSlash]
   }

   let readFile(path, bufferSize = 1024) {
      let handle = open(path, { read: true }) catch e -> raise {...e, path: path, bufferSize: bufferSize}

      let result = ""
         
      let buffer = read(handle, bufferSize)
      while buffer != () -> {
         result := result + buffer
         buffer := read(handle, bufferSize)
      }
      
      close(handle)

      result
   }

   let each(xs, f) {
      let lp = 0

      while lp < len(xs) -> {
         f(xs[lp], lp)

         lp := lp + 1
      }
   }

   let realRawImport(name) {
      let name = rebo.os["path.absolute"](name)
      let current = rebo.imports[name]

      if current == () -> {
         let startTime = milliTimestamp()
         rebo.imports[name] := true

         let processFile() {
            let script = readFile(name)
            let newScope = rebo.lang["scope.open"](callerScope)
            rebo.lang["scope.bind!"](newScope, "__FILE", name)
            # rebo.lang.eval(script, newScope)
            eval(script, {scope: newScope, persistent: true})
            
            let bindings = {}
            newScope |> keys() |> each(fn(key) { if key[0] != '_' -> bindings[key] := newScope[key] })

            bindings
         }
         
         rebo.imports[name] := processFile() catch e -> { 
            rebo.imports[name] := ()
            raise e
         }

         let endTime = milliTimestamp()

         if rebo.lang["import.verbose"] -> println("\x27;[37m", "Imported ", name, " (", endTime - startTime, "ms)", "\x27;[0m")

         rebo.imports[name]
      } | typeof(current) == "Record" -> current
      | raise {
            kind: "CyclicImport",
            name: name
         }
   }

   let rawImport(name) =
      if name[0] == '/' || callerScope == () || callerScope["__FILE"] == () -> realRawImport(name)
       | realRawImport(dir(callerScope["__FILE"]) + "/" + name)

   if lastIndexOf(name, '.') != () || lastIndexOf(name, '/') != () -> rawImport(name)
    | { 
      let reboExeHome = dir(rebo.exe)
      
      if fexists(reboExeHome + "/../lib/" + name + ".rebo") -> rawImport(reboExeHome + "/../lib/" + name + ".rebo")
       | rawImport(reboExeHome + "/../../lib/" + name + ".rebo")
   }
}

# Default the displaying of imports to true.
rebo.lang["import.verbose"] := true

# Add all values in "std" to the top-level scope.  The consequence is any 
# declaration in "std" will be shadowed by a declaration in the top-level 
# scope.
keys(import("std")) |> import("std").each(fn(key) {
   rebo.lang["scope.bind!"](rebo.lang["scope.super"](scope()), key, import("std")[key])
})
