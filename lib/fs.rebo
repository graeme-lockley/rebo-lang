let Std = import("std")

# The default options for the `files` function.  The `recursive?` option is 
# whether or not to recursively search the directory.  The `predicate` option
# accepts a file path and returns whether or not to include the file in the
# results.  The `dirPredicate` option accepts a directory path and returns
# whether or not to recurse into the directory.
let defaultFiles = {
   recursive?: true,
   predicate: fn(_) true,
   dirPredicate: fn(_) true
};

# Returns a list of files in the given directory.  The `opt` argument is an
# object with the following options:
#  - `recursive?` (default: `true`): Whether or not to recursively search the
#    directory.
#  - `predicate` (default: `fn(_) true`): A function that accepts a file path
#    and returns whether or not to include the file in the results.
#  - `dirPredicate` (default: `fn(_) true`): A function that accepts a
#    directory path and returns whether or not to recurse into the directory.
let files(path, opt = defaultFiles) {
   opt := {...defaultFiles, ...opt}

   let result = []

   _files(path, opt, result)

   result
}

let _files(path, opt, result) {
   ls(path) |> Std.each(fn(item) {
      let fullPath = path + "/" + item.name
   
      if item.kind == "directory" && opt.recursive? && opt.dirPredicate(fullPath) ->
            _files(fullPath, opt, result)
       | item.kind == "file" && opt.predicate(fullPath) ->
            result <! fullPath
   })
}

# Returns the contents of the given file as a string.  If the file cannot be
# opened, the function returns the file error.
let readFile(path, bufferSize = 1024) {
   let handle = open(path, { read: true })

   if typeof(handle) == "File" -> {
      let result = ""
      
      let buffer = read(handle, bufferSize)
      while len(buffer) == bufferSize -> {
         result := result + buffer
         buffer := read(handle, bufferSize)
      }
      result := result + buffer
      
      close(handle)

      result
   } | {...handle, path: path, bufferSize: bufferSize}
}

# Returns the contents of the given file as a list of lines.  If the file
# cannot be opened, the function returns the file error.
let lines(path) {
   let contents = readFile(path)

   if typeof(contents) == "String" -> contents |> Std.split('\n')
   | contents
}
