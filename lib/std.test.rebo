let Std = import("std")

let run(suite) {
  _firstIndexOf(suite.suite("lastIndexOf"))
  _lastIndexOf(suite.suite("lastIndexOf"))
  _range(suite.suite("range"))
}

let _firstIndexOf(suite) {
  let input = Std.range(1, 11)

  "1..10, 1" |>
    suite.eq(Std.firstIndexOf(input, 1), 0)

  "1..10, 9" |>
    suite.eq(Std.firstIndexOf(input, 10), 9)

  "1..10, 5" |>
    suite.eq(Std.firstIndexOf(input, 5), 4)

  "1..10, 11" |>
    suite.eq(Std.firstIndexOf(input, 11), ())

  "hello world, l" |>
    suite.eq(Std.firstIndexOf("hello world", 'l'), 2)  
}

let _lastIndexOf(suite) {
  let input = Std.range(1, 11)

  "1..10, 1" |>
    suite.eq(Std.lastIndexOf(input, 1), 0)

  "1..10, 9" |>
    suite.eq(Std.lastIndexOf(input, 10), 9)

  "1..10, 5" |>
    suite.eq(Std.lastIndexOf(input, 5), 4)

  "1..10, 11" |>
    suite.eq(Std.lastIndexOf(input, 11), ())

  "hello world, l" |>
    suite.eq(Std.lastIndexOf("hello world", 'l'), 9)  
}

let _range(suite) {
  "10" |>
    suite.eq(Std.range(10), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

  "1, 10" |>
    suite.eq(Std.range(1, 10), [1, 2, 3, 4, 5, 6, 7, 8, 9])

  "1, 10, 2" |>
    suite.eq(Std.range(1, 10, 2), [1, 3, 5, 7, 9])

  "1, 10, 2, fn(n) n * n" |>
    suite.eq(Std.range(1, 10, 2, fn(n) n * n), [1, 9, 25, 49, 81])

  "10, 1" |>
    suite.eq(Std.range(10, 1), [10, 9, 8, 7, 6, 5, 4, 3, 2])

  "10, 1, -2" |>
    suite.eq(Std.range(10, 1, -2), [10, 8, 6, 4, 2])
}
