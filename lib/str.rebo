let endsWith?(s, suffix) = 
  s[len(s) - len(suffix):] == suffix

let startsWith?(s, prefix) = 
  s[0:len(prefix)] == prefix

let dropStart(s, n) = 
  s[n:]

let dropEnd(s, n) =
  s[0:len(s) - n]

let takeWhile(s, p) {
  let i = 0
  while i < len(s) && p(s[i]) -> i := i + 1

  s[:i]
}

let whitespace?(c) = 
  int(c) <= 32

let digit?(c) = 
  int(c) >= 48 && int(c) <= 57

let trimRight(s, p = whitespace?) {
  let j = len(s) - 1
  while j >= 0 && p(s[j]) -> j := j - 1

  s[:j+1]
}

let trimLeft(s, p = whitespace?) {
  let i = 0
  while i < len(s) && p(s[i]) -> i := i + 1

  s[i:]
}

let trim(s, p = whitespace?) {
  let i = 0
  while i < len(s) && p(s[i]) -> i := i + 1

  let j = len(s) - 1
  while j >= 0 && p(s[j]) -> j := j - 1

  s[i:j+1]
}

let replace(s, from, to) {
  let i = 0
  let result = ""
  while i < len(s) -> {
    if startsWith?(s[i:], from) -> {
      result := result + to
      i := i + len(from)
    } | {
      result := result + s[i:i+1]
      i := i + 1
    }
  }

  result
}