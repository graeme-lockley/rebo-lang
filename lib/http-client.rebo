let JSON = import("json")

# `get` makes a GET request to the given URL and returns a response object.
let get(url, headers = {}) = _bodyLess(url, "GET", headers)

# `head` makes a HEAD request to the given URL and returns a response object.
let head(url, headers = {}) = _bodyLess(url, "HEAD", headers)

# `delete` makes a DELETE request to the given URL and returns a response object.
let delete(url, headers = {}) = _bodyLess(url, "DELETE", headers)

let _bodyLess(url, method, headers) {
   let response = rebo.os["http.client.request"](url, method, headers)

   rebo.os["http.client.finish"](response)
   rebo.os["http.client.wait"](response)

   let status = rebo.os["http.client.status"](response)
   if status != 200 -> raise { kind: "RequestError", url: url, method: method, ...rebo.os["http.client.response"](response)}

   {
      response: fn() rebo.os["http.client.response"](response),
      read: fn(bytes) read(response, bytes),
      readAll: fn(bytes) _readAll(response, bytes),
      readAllJson: fn(bytes) JSON.parse(_readAll(response, bytes))
   }
}

# `post` makes a POST request to the given URL and returns a response object.
let post(url, body = (), headers = {}) = _body(url, "POST", body, headers)

# `put` makes a PUT request to the given URL and returns a response object.
let put(url, body = (), headers = {}) = _body(url, "PUT", body, headers)

# `patch` makes a PATCH request to the given URL and returns a response object.
let patch(url, body = (), headers = {}) = _body(url, "PATCH", body, headers)

let _body(url, method, body, headers ) {
   if body == () -> headers := {"transfer-encoding": "chunked", "Content-Type": "application/json", ...headers }
   | { 
      body := encode(body)

      headers := {
         "transfer-encoding": "chunked", 
         "Content-Type": "application/json",
         "Content-Length": len(body),
         ...headers 
      }
    }

   let response = rebo.os["http.client.request"](url, method, headers)

   if body == () -> {
      let self = {
         write: fn(body) write(response, encode(body)),
         wait: fn() {
            rebo.os["http.client.finish"](response)
            rebo.os["http.client.wait"](response)

            let status = rebo.os["http.client.status"](response)
            if status != 200 -> raise { kind: "RequestError", url: url, method: method, ...rebo.os["http.client.response"](response)}

            self.write := ()
            self.content := fn() rebo.os["http.client.response"](response)
            self.read := fn(bytes) read(response, bytes)
            self.readAllJson := fn(bytes) JSON.parse(_readAll(response, bytes))
         }
      }

      self
   } | {
      write(response, body)

      rebo.os["http.client.finish"](response)
      rebo.os["http.client.wait"](response)

      let status = rebo.os["http.client.status"](response)
      if status != 200 -> raise { kind: "RequestError", url: url, method: method, ...rebo.os["http.client.response"](response)}

      {
         response: fn() rebo.os["http.client.response"](response),
         read: fn(bytes) read(response, bytes),
         readAll: fn(bytes) _readAll(response, bytes),
         readAllJson: fn(bytes) JSON.parse(_readAll(response, bytes))
      }
   }
}

let _readAll(response, bytes) {
   let fullResponse = []
   let content = read(response, bytes)

   while content != () -> {
      fullResponse <! content
      content := read(response, bytes)
   }

   fullResponse |> join("")
}

let encode(content) =
   if typeof(content) == "String" -> content
    | JSON.serialise(content)

# let HTTP = import("http") ; HTTP.get("https://godsays.xyz").readAll()
# { \"name\": \"Apple MacBook Pro 16\", \"data\": { \"year\": 2019, \"price\": 1849.99, \"CPU model\": \"Intel Core i9\", \"Hard disk size\": \"1 TB\" } }