# `ansiColours` are the ANSI/VT100 terminal codes that allow colours to be 
# displayed on the terminal.  The codes are used in the `print` and `println` 
# function to change the colour of the text.
let ansi = {
  control: {
    reset: "\x27;[0m"
  },
  foreground: {
    black: "\x27;[30m",
    red: "\x27;[31m",
    green: "\x27;[32m",
    yellow: "\x27;[33m",
    blue: "\x27;[34m",
    magenta: "\x27;[35m",
    cyan: "\x27;[36m",
    white: "\x27;[37m",
    lightRed: "\x27;[91m",
    lightGreen: "\x27;[92m",
    lightYellow: "\x27;[93m",
    lightBlue: "\x27;[94m",
    lightMagenta: "\x27;[95m",
    lightCyan: "\x27;[96m",
    lightWhite: "\x27;[97m",
    lightGray: "\x27;[37m",
    darkGray: "\x27;[90m"
  }
}

# `constant` returns a function that always returns the given value.
let constant(value) = fn() value

# `any` returns `true` if any element of the iterable `xs` returns `true` when
# passed to the predicate function `f`. The predicate function receives arguments
# (`element`, `index`).
let any(xs = [], f = constant(false)) {
  let lp = 0
  let found = false

  while lp < len(xs) && !found -> {
    if f(xs[lp], lp) -> found := true

    lp := lp + 1
  }

  found
}

# `each` calls the given iterator function `f` for each element of the iterable
# `xs`. The iterator function receives arguments (`element`, `index`).
let each(xs, f) {
  let lp = 0

  while lp < len(xs) -> {
    f(xs[lp], lp)

    lp := lp + 1
  }
}

# `filter` produces a sequence containing only the elements of `xs` that return
# `true` when passed to the filter predicate `f`. `f` receives arguments 
# (`element`, `index`).
let filter(xs, f) {
  let result = []
  let lp = 0

  while lp < len(xs) -> {
    let item = xs[lp]

    if f(item, lp) -> {
      result <! item
    }
    
    lp := lp + 1
  }

  result
}

# `range` produces a sequence of numbers from `start` to `end` (exclusive). This
# function can also accept a set value as well as a mapping function.
#
# ``` rebo
# range(10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# range(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]
# range(1, 10, 2) == [1, 3, 5, 7, 9]
# range(1, 10, 2, fn(n) n * n) == [1, 9, 25, 49, 81]
# range(10, 1, -1) == [10, 9, 8, 7, 6, 5, 4, 3, 2]
# ```
let range(start = 10, end = (), step = (), f = fn(n) n) { 
  if step == 0 -> {
    step := ()
  }

  if end == () -> {
    end := start
    start := 0
  }

  if start <= end && step == () -> {
    step := 1
  }

  if start > end && step == () -> {
    step := -1
  }

  let result = []
  if step > 0 -> {
    if f == () ->
      while start < end -> {
        result <! start
        start := start + step
      }
    | while start < end -> {
        result <! f(start)
        start := start + step
      }
  } | {
    if f == () ->
      while start > end -> {
        result <! start
        start := start + step
      }
    | while start > end -> {
        result <! f(start)
        start := start + step
      }
  }

  result
}

# `map` applies the given mapping function `f` to each element of the sequence
# `xs` and returns a new sequence containing the results. The mapping function
# receives arguments (`element`, `index`).
let map(xs, f) {
  let result = []
  let lp = 0

  while lp < len(xs) -> {
    result <! f(xs[lp], lp)
    lp := lp + 1
  }

  result
}

# `reduce` applies the given reducer function `f` to each element of the iterable
# `xs` and returns a single value. The reducer function receives arguments
# (`accumulator`, `element`, `index`).
let reduce(xs, f, init = ()) {
  let result = init
  let lp = 0

  while lp < len(xs) -> {
    result := f(result, xs[lp], lp)
    lp := lp + 1
  }

  result
}

# `split` breaks a string up into a sequence of substrings using the given separator.
# If no separator is given, the string is split on whitespace.
# If the separator is a sequence then the string is split on any of the characters
# in the sequence.
let split(s, sep = " ") {
  if typeof(sep) == "Char" -> {
      let result = []
      let lp = 0
      let start = 0

      while lp < len(s) -> {
        if s[lp] == sep -> {
          result <! s[start:lp]
          start := lp + 1
        }

        lp := lp + 1
      }

      result <! s[start:lp]
    } 
  | typeof(sep) == "String" && len(sep) > 0 -> {
      let result = []
      let lp = 0
      let start = 0

      while lp < len(s) -> {
        if s[lp:lp + len(sep)] == sep -> {
          result <! s[start:lp]
          start := lp + len(sep)
        }

        lp := lp + 1
      }

      result <! s[start:lp]
    }
  | typeof(sep) == "Sequence" && len(sep) > 0 -> {
      let result = []
      let lp = 0
      let start = 0

      while lp < len(s) -> {
        let found = false
        let sp = 0

        while !found && sp < len(sep) -> {
          if s[lp:lp + len(sep[sp])] == sep[sp] -> found := true
           | sp := sp + 1
        }

        if found -> {
          result <! s[start:lp]
          start := lp + len(sep[sp])
        }

        lp := lp + 1
      }

      result <! s[start:lp]
    }
  | [s]
}

# `join` concatenates the elements of `lst` into a single string using `sep` as
# the separator.
let join(lst, sep = "") {
  let result = ""
  let lp = 0

  while lp < len(lst) -> {
    if lp > 0 ->
      result := result + sep

    result := result + lst[lp]

    lp := lp + 1
  }

  result
}

# `lastIndexOf` returns the index of the last occurrence of `item` in `xs` or
# `()` if `item` is not found.
let lastIndexOf(xs, item) {
  let result = ()
  let lp = len(xs) - 1

  while result == () && lp >= 0 -> {
    if xs[lp] == item -> result := lp

    lp := lp - 1
  }

  result
}

# `firstIndexOf` returns the index of the first occurrence of `item` in `xs` or
# `()` if `item` is not found.
let firstIndexOf(xs, item) {
  let result = ()
  let lp = 0

  while result == () && lp < len(xs) -> {
    if xs[lp] == item -> result := lp

    lp := lp + 1
  }

  result
}

# `findFirst` returns the first element of `seq` that returns `true` when passed to
# the predicate function `p`. The predicate function receives arguments
# (`element`, `index`).
let findFirst(seq, p) {
  let i = 0
  let len = len(seq)
  let result = ()

  while result == () && i < len -> {
    let x = seq[i]
    if p(x, i) -> result := x
     | i := i + 1
  }

  result
}

# `findLast` returns the last element of `seq` that returns `true` when passed to
# the predicate function `p`. The predicate function receives arguments
# (`element`, `index`).
let findLast(seq, p) {
  let i = len(seq) - 1
  let result = ()

  while result == () && i >= 0 -> {
    let x = seq[i]
    if p(x, i) -> result := x
     | i := i - 1
  }

  result
}

# `sum` returns the sum of all the elements in `xs`.
let sum(xs) =
  xs |> reduce(fn (a, b) a + b, 0) 
