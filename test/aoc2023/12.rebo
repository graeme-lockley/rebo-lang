#!env rebo

let FS = import("fs")
let Path = import("path")
let Std = import("std")
let Str = import("str")

let pow(m, n) =
    if n == 0 -> 1
     | m * pow(m, n - 1)

let proposedRow(row, n) =
    if n == 0 -> Str.replace(row, "?", "#")
     | proposedRow(Str.replaceFirst(row, '?', if n % 2 == 0 -> '#' | '.'), n / 2)

let validProposal(row, damaged) {
    let chunks = Std.split(row, '.') |> Std.filter(fn (s) s != "") |> Std.map(len)

    chunks == damaged
}

let bruteForce(row, damaged) {
    let numberOfQs = Std.count(row, fn (c) c == '?')

    let upper = pow(2, numberOfQs)
    let result = 0

    let i = 0
    while i < upper -> {
        if proposedRow(row, i) |> validProposal(damaged) -> result := result + 1
        i := i + 1
    }

    result
}

let parseContent(name) =
   Path.dir(__FILE) + "/" + name 
      |> FS.lines()
      |> Std.map(fn (s) Std.split(s, ' '))
      |> Std.map(fn (s) [s[0], s[1] |> Std.split(',') |> Std.map(int)])

let calculate(name) {
    let content = parseContent(name)

    content
        |> Std.map(fn (s, idx) bruteForce(s[0], s[1]))
        |> Std.sum()
}
