let Std = import("./std.rebo")

let _option(part) =
  if part[0:2] == "--" -> part[2:]
   | part[0] == '-' -> part[1:]
   | ()

let parseArgs(argv) {
  let opts = {}
  let args = []

  let lastOpt = ()
  let onlyPositional? = false

  let verb = if argv[2] == () || argv[2][0] == '-' -> () | argv[2]
  let argv' = if verb == () -> argv[2:] | argv[3:]

  argv' |> Std.each(fn(part) {
    let opt = _option(part)

    if part == "--" ->
        onlyPositional? := true
    | onlyPositional? ->
        args <! part
    | lastOpt == () && opt == () ->
        args <! part
    | lastOpt != () && opt == () -> 
        { opts[lastOpt] := part ; lastOpt := () }
    | lastOpt == () && opt != () ->
        lastOpt := opt
    | lastOpt != () && opt != () ->
        { opts[lastOpt] := true ; lastOpt := opt }
  })

  if lastOpt != () ->
    opts[lastOpt] := true

  {
    exe: argv[0],
    main: argv[1],
    verb: verb,
    opts: opts,
    args: args
  }
}

let parse() = parseArgs(args())
