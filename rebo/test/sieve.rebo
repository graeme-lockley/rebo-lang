let prime?(n = 2) = _primes(n)[n]

let primes(n = 2) {
  let result = []
  let values = _primes(n)

  let i = 2
  while i <= n -> {
    if values[i] -> {
      result <! i
    }

    i := i + 1
  }

  result
}

let _primes(n = 2) {
  let primes = range(0, n + 1, 1, fn(n) true)

  let outer = 2
  while outer * outer <= n -> {
    if primes[outer] -> {
      let inner = outer * outer
      while inner <= n -> {
        primes[inner] := false
        inner := inner + outer
      }
    }

    outer := outer + 1
  }

  primes
}

let _initialisePrimes(n) {
  let primes = []

  let i = 0
  while i <= n -> {
    primes <! true
    i := i + 1
  }

  primes
}

let range(start = 10, end = (), step = (), f = fn(n) n) { 
  if step == 0 -> {
    step := ()
  }

  if end == () -> {
    end := start
    start := 0
  }

  if start <= end && step == () -> {
    step := 1
  }

  if start > end && step == () -> {
    step := -1
  }

  let result = []
  if step > 0 -> {
    if f == () ->
      while start < end -> {
        result <! start
        start := start + step
      }
    | while start < end -> {
        result <! f(start)
        start := start + step
      }
  } | {
    if f == () ->
      while start > end -> {
        result <! start
        start := start + step
      }
    | while start > end -> {
        result <! f(start)
        start := start + step
      }
  }

  result
}

