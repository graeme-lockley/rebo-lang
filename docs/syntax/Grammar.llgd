uses "./Scanner.llld";

Program
    : Element {";" Element}
    ;

Element
    : PipeExpression
    | DataDeclaration
    | TypeAliasDeclarations
    | ImportStatement
    ;

Expression
    : PipeExpression {";" PipeExpression}
    ;

PipeExpression
    : BooleanOr {"|>" BooleanOr}
    ;

BooleanOr
    : BooleanAnd {"||" BooleanAnd}
    ;

BooleanAnd
    : Equality {"&&" Equality}
    ;

Equality
    : AppendCons [EqualityOps AppendCons]
    ;

EqualityOps
    : "=="
    | "/="
    | "<"
    | "<="
    | ">"
    | ">="
    ;

AppendCons
    : Additive {AppendConsOps Additive}
    ;

AppendConsOps
    : "::"
    | "++"
    ;

Additive
    : Multiplicative {AdditiveOps Multiplicative}
    ;

AdditiveOps
    : "+"
    | "-"
    ;

Multiplicative
    : Apply {MultiplicativeOps Apply}
    ;

MultiplicativeOps
    : "*"
    | "/"
    ;

Apply
    : Typing {Typing}
    ;

Typing
    : Projection [":" Type]
    ;

Projection
    : Factor {"." LowerIdentifier}
    ;

Factor
    : "(" [Expression {"," Expression}] ")"
    | LiteralInt
    | LiteralString
    | LiteralChar
    | "True"
    | "False"
    | "\" OptionalTypeParameters Parameter {Parameter} [":" Type] "=" Expression
    | "let" ["rec"] ValueDeclaration {"and" ValueDeclaration} ["in" Expression]
    | "if" "(" Expression ")" Expression "else" Expression
    | UpperIdentifier ["." Identifier]
    | LowerIdentifier
    | "match" Expression "with" ["|"] Case {"|" Case}
    | "[" [Expression {"," Expression}] "]"
    | "{" [LowerIdentifier ":" Expression {"," LowerIdentifier ":" Expression} ["|" Expression ]] "}"
    | "builtin" LiteralString
    ;

Identifier
    : LowerIdentifier
    | UpperIdentifier
    ;

ValueDeclaration
    : ValueDeclarationIdentifier OptionalTypeParameters {Parameter} [":" Type] "=" Expression
    ;

ValueDeclarationIdentifier
    : ValueDeclarationIdentifierAs ["as" ValueDeclarationIdentifierAs]
    ;

ValueDeclarationIdentifierAs
    : ValueDeclarationIdentifierFactor [":" Type]
    ;

ValueDeclarationIdentifierFactor
    : LowerIdentifier["*"]
    | "[" ValueDeclarationIdentifier {"," ValueDeclarationIdentifier} "]"
    | "(" ValueDeclarationIdentifier {"," ValueDeclarationIdentifier} ")"
    | "{" ValueDeclarationIdentifier {"," ValueDeclarationIdentifier} "}"
    ;

Parameter
    : LowerIdentifier
    | "(" LowerIdentifier ":" Type {"," LowerIdentifier ":" Type} ")"
    ;

Case
    : Pattern "->" Expression
    ;

Pattern
    : PatternTerm {"::" PatternTerm}
    ;

PatternTerm
    : "(" [Pattern {"," Pattern}] ")"
    | LiteralInt
    | LiteralString
    | LiteralChar
    | "True"
    | "False"
    | LowerIdentifier
    | UpperIdentifier ["." UpperIdentifier] {Pattern}
    | "[" [Pattern {"," Pattern}] "]"
    | "{" [LowerIdentifier [":" Pattern] {"," LowerIdentifier [":" Pattern]} ["|" Pattern ]] "}"
    ;

DataDeclaration
    : "data" TypeDeclaration {"and" TypeDeclaration}
    ;

TypeDeclaration
    : UpperIdentifier["*" | "-"] OptionalTypeParameters {LowerIdentifier} "=" ["|"] ConstructorDeclaration {"|" ConstructorDeclaration}
    ;

ConstructorDeclaration
    : UpperIdentifier {TermType | UpperIdentifier ["." UpperIdentifier]}
    ;

Type
    : TupleType {"->" TupleType}
    ;

TupleType:
    : ADTType {"*" ADTType}
    ;

ADTType
    : UpperIdentifier ["." UpperIdentifier] {TermType | UpperIdentifier ["." UpperIdentifier]}
    | TermType
    ;

TermType
    : LowerIdentifier
    | "(" Type ")"
    | "{" [LowerIdentifier ":" Type {"," LowerIdentifier ":" Type} ["|" Type]] "}"
    ;

TypeAliasDeclarations
    : "type" TypeAliasDeclaration
    ;

TypeAliasDeclaration
    : UpperIdentifier["*" | "-"] OptionalTypeParameters "=" TermType
    ;

ImportStatement
    : "import" ImportItems "from" LiteralString
    ;

ImportItems
    : "*" ["as" UpperIdentifier]
    | ImportItem {"," ImportItem}
    ;

ImportItem
    : UpperIdentifier ["*" | "-"]
    | LowerIdentifier ["as" LowerIdentifier] ["*"]
    ;

OptionalTypeParameters
    : ["<" UpperIdentifier {"," UpperIdentifier} ">"]
    ;